@{
    ViewBag.Title = "Database Management";
}
@Styles.Render("~/Content/css")
@Styles.Render("~/Content/themes/base/css")

<header>
    <style class="cp-pen-styles">
        .ok_edit
        {
            background: #eee;
            border: 1px solid #000;
            min-width: 50px;
        }

        .no_edit
        {
            background: #e0e0e0;
            border: 1px solid #000;
            min-width: 50px;
        }

        .txtfld
        {
            width: 100px;
        }

        .disabled_input
        {
            background-color: #e0e0e0;
        }

        #the_editor
        {
            margin-right: 10px;
            border-right-style: solid;
            border-right-width: 1px;
        }

        .highlight
        {
            background-color: red;
        }

        .odd
        {
            background: #fff;
        }

        .entry
        {
            margin-bottom: 10px;
        }

        .even
        {
            background: #eee;
        }

        .table-header-rotated
        {
            border-collapse: collapse;
            height: 400px;
            overflow: scroll;
        }

        .csstransforms .table-header-rotated td
        {
            width: 30px;
        }

        .no-csstransforms .table-header-rotated th
        {
            padding: 5px 10px;
        }

        .table-header-rotated td
        {
            text-align: center;
            padding: 10px 5px;
            border: 1px solid #ccc;
        }

        .csstransforms .table-header-rotated th.rotate
        {
            height: 140px;
            white-space: nowrap;
        }

            .csstransforms .table-header-rotated th.rotate > div
            {
                -webkit-transform: translate(25px, 51px) rotate(315deg);
                -ms-transform: translate(25px, 51px) rotate(315deg);
                transform: translate(25px, 51px) rotate(315deg);
                width: 30px;
            }

                .csstransforms .table-header-rotated th.rotate > div > span
                {
                    border-bottom: 1px solid #ccc;
                    padding: 5px 10px;
                }

        .table-header-rotated th.row-header
        {
            padding: 0 10px;
            border-bottom: 1px solid #ccc;
        }
    </style>
    <script src="~/Scripts/jquery-1.8.2.min.js"></script>
    <script src="~/Scripts/jquery-ui-1.8.24.min.js"></script>
</header>
<body>
    <div id="createWrapper" >
        <div id="newItem"></div>
    </div>
    <div>

        <div>
            <select id="selectEntity">
                <option class="menuOption" value="">Choose a database</option>
                <option class="menuOption" value="RevisitModel">Revisit</option>
                <option class="menuOption" value="DiagnosisModel">Diagnosis</option>
                <option class="menuOption" value="SupplementalDiagnosisCategoryModel">Supplemental Diagnosis Categories</option>
                <option class="menuOption" value="SupplementalDiagnosisModel">Supplemental Diagnosis</option>

            </select>
        </div>
    </div>
    <hr />
    <div>
        <button id="create" type="button">Create</button>
    </div>

    <table id="tableWrapper">
        <tr>
            <td valign="top">
                <div id="the_editor"></div>

            </td>
            <td valign="top">
                <div id="the_table">
                </div>

            </td>
        </tr>
    </table>
</body>
<script>
    var matrix = [];

    function getDoNotEdit() {

        var do_not_edit = {};

        do_not_edit["RevisitId"] = "";
        do_not_edit["CreateDate"] = "";
        do_not_edit["CreatedBy"] = "";
        do_not_edit["UpdateDate"] = "";
        do_not_edit["curr_sys_id"] = "";
        do_not_edit["DiagnosisId"] = "";
        do_not_edit["diag_alert_thrshld_id"] = "";
        do_not_edit["faclty_hw_invtry_id"] = "";
        do_not_edit["bnfcry_id"] = "";
        do_not_edit["diag_id"] = "";
        do_not_edit["faclty_id"] = "";
        do_not_edit["gndr_id"] = "";
        do_not_edit["orgzn_id"] = "";
        do_not_edit["rvisit_id"] = "";
        do_not_edit["splmtl_diag_id"] = "";
        do_not_edit["splmtl_diag_cat_id"] = "";
        do_not_edit["faclty_id"] = "";
        do_not_edit["ov_diag_id"] = "";
        do_not_edit["visit_uuid"] = "";
        do_not_edit["element_id"] = "";

        return do_not_edit;
    }

    function createButtons(row) {
        var btn = "<td class='no_edit'>";
        btn += "<button id='b" + row + "' onclick='btnstate(this);'>Edit</button>";
        btn += "</td>";
        return btn;
    }

    function btnstate(obj) {
        var currentState = document.getElementById(obj.id).innerHTML;
        if (currentState == "Edit") {
            document.getElementById(obj.id).innerHTML = "Update";
        } else if (currentState == "Update") {
            document.getElementById(obj.id).innerHTML = "Edit";
            doSubmit(obj.id);
        } else {
            alert("error in btnstate(); for row " + row);
        }
    }



    var do_not_edit = {};
    function populate() {
        do_not_edit = getDoNotEdit();

        var update_rows_placeholder = "<th class='rotate'><div><span> </span></div></th>";
        //value does not matter. Just treating this assoc array as a Set.
        //var html = "<table id='main_table' border='1'><tr>" + update_rows_placeholder;

        var html = "<table class='table table-header-rotated'><thead><tr>" + update_rows_placeholder;

        for (var key in matrix[0]) {
            //html += "<th  class='no_edit'>" + key + "</th>";
            html += "<th class='rotate'><div><span>" + key + "</span></div></th>";
        }
        html += "</tr>";

        for (var row = 0; row < matrix.length; row++) {



            html += "<tr>";
            html += createButtons(row);
            for (var key in matrix[row]) {

                var id = row + "_" + key;

                if (do_not_edit.hasOwnProperty(key)) {
                    html += "<td class='no_edit' align='right' id='" + id + "'  >" + matrix[row][key] + "</td>";
                } else {
                    html += "<td class='ok_edit'>";
                    html += "<input type='text' id='" + id + "' class='txtfld' value='" + matrix[row][key] + "'     /></center></td>";
                }
            }
            html += "</tr>";
        }
        document.getElementById("the_table").innerHTML = html;
    }




    //////////// 
    function doSubmit(row) {
        console.log("Current entity(do Submit function = " + currentEntity);
        var results = {};
        var out = "";

        row = row.replace("b", "");
        for (var key in matrix[0]) {
            //  results[key] = document.getElementById(key).value;
            var id = row + "_" + key;
            var val = "";

            if (do_not_edit.hasOwnProperty(key)) {
                val = document.getElementById(id).innerHTML;
            } else {
                val = document.getElementById(id).value;
            }


            results[key] = val;

        }

        update(results, currentEntity);
    }
    /*
    var lastClickedRow = undefined;
    var lastCssClass = undefined;
    function clickRow(obj) {
        lastCssClass = document.getElementById(obj.id).className;
        document.getElementById(obj.id).className = "highlight";

        if (document.getElementById(lastClickedRow) != undefined) {
            document.getElementById(lastClickedRow).className = lastCssClass;
            console.log("YEP for " + lastClickedRow + "   and " + lastCssClass);
        } else {
            console.log("NOPE for " + lastClickedRow + "   and " + lastCssClass);
        }
        lastClickedRow = obj.id;
        lastCssClass = document.getElementById(obj.id).className;
        for (var key in matrix[obj.id]) {
            document.getElementById(key).value = matrix[obj.id][key];
        }
    }
    */
</script>

<script>
    var currentEntity = null;
    var dialog = null;
    function getTable(entityName) {
        $.ajax({
            url: "/Home/GetEntity",
            data: { entityName: entityName },
            type: 'POST',
            dataType: 'json',
            success: function (mydata) {
                // Need to eval mydata into an object. Before the eval mydata is just a complicated string
                matrix = eval("(" + mydata + ')');
                /*console.log("length " + matrix.length + " and it is " + matrix);
                for (var i = 0 ; i < matrix.length ; i++) {
                    for (var key in matrix[0]) {
                        console.log(i + "   key " + key + "   ?? " + matrix[0][key]);
                    }
                }*/
                populate();
                currentEntity = entityName;
                $('#create').show();
               
            },
            error: function (mydata) { alert("error"); alert(mydata); },
        });
    }

    function update(keyValue, entityName) {

        $.ajax({

            url: "/Home/SaveEntity",
            data: { keyValues: JSON.stringify(keyValue), entityName: entityName, isNew: false },
            type: 'POST',
            dataType: 'json',
            success: function (mydata) {
                //console.log(mydata)
                matrix = eval("(" + mydata + ')');
                populate();
            },
            error: function (mydata) { alert("error"); alert(mydata); },
        });
    }
    function create(entityName) {

        $.ajax({

            url: "/Home/Create",
            data: { modelName: entityName },//{ keyValues: JSON.stringify(keyValue), entityName: entityName },
            type: 'POST',
            //dataType: 'json',
            async: false,
            success: function (mydata) {
                dialog.dialog("open");
                $(".ui-dialog-titlebar").hide();
                $('#newItem').html(mydata);
                // alert("success");
                //console.log(mydata)
                //matrix = eval("(" + mydata + ')');
                //populate();
            },
            error: function (mydata) {
                console.log(mydata);
                alert("error"); alert(mydata);
            },
        });
    }

    dialog = $('#createWrapper').dialog({
        
        autoOpen: false,
        
        width: 800,
        modal: true,
        

        
    });
   
    $(document).ready(function () {
        
        $('#create').hide();

        $('#selectEntity').on('change', function () {
            var entityName = $(this).val()
            getTable(entityName);
        });

        $('.menuOption').click(function () {
            var entityName = $(this).val()
            getTable(entityName);
        })
        $('#create').click(function () {
            var entity = $('#selectEntity').val();
            create(entity);

        });
    });
</script>

